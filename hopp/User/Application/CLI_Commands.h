///////////////////////////////////////////////////////////////////////////////
///
///                Copyright(c) 2016 FlexMedical
///
///                   *** Confidential Company Proprietary ***
///
/// \file CLI_Commands.h
///
/// \brief Command Line Interface functions
///
/// Detailed description starts here.
///
///
///////////////////////////////////////////////////////////////////////////////

#ifndef _CLI_COMMANDS_H_
#define _CLI_COMMANDS_H_

///////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Defines and macros
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Structures, Enumerations, Typedefs
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Local Variables
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Function Prototypes
///////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
/// \brief Sends out a list of all available commands.
void CLI_help_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Clears the LCD display of all drawn pixels.
void CLI_ClearScreen_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Displays the text of the parameter associated with the command, on the LCD.
void CLI_GUI_DispString_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Enable or Disable switch manager debug logs.
void CLI_Toggle_SM_Debug( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Enable or disable battery percentage simulation.
void CLI_ControlBatterySimulation( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Enable or Disable switch manager debug logs.
void CLI_Toggle_GPIO_Debug( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Get Date Time from RTC.
void CLI_GetDateTime( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Set Date Time in RTC.
void CLI_SetDateTime( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Display particular screen.
void CLI_GUI_DispScreen_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Generate dummy button press events.
void CLI_ButtonPressHandler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Read ADC channel data.
void CLI_ReadAdcDataCmdHandler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Query for task information display
void CLI_TaskQuery( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief To test file system read write operation
void CLI_FsTest( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief to query the number of open files
void CLI_FsQuery ( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief To read file system and display into terminal
void CLI_FsRead( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief To format NOR flash with FAT filesystem
void CLI_FsFormat( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief To Change directories within file system
void CLI_FileChangeDir( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief To delete file from flash
void CLI_FileDelete( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief List of files from root directory
void CLI_FsDir( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Prepares new firmware image from the file system to internal flash
void CLI_FwUpdate ( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Control LED ON/OFF
void CLI_Led_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Set the software position of the encoder for easier testing.
void CLI_EncoderPosSetHandler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Retrieve the position of the encoder.
void CLI_EncoderPosGetHandler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Retrieve the direction of the encoder. Clock wise or counter clock wise.
void CLI_EncoderDirectionHandler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Retrieve the brightness of the LED.
void CLI_LedBrightnessHandler( SERIAL_CMD_SOURCE_T source_ );


////////////////////////////////////////////////////////////////////////////////
/// \brief Simulate Battery State.
void CLI_SimulateBattStateHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Changes the duty cycle of the PWM to the motor which increases/decreases the speed.
void CLI_DutyCycleHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Retrieves or sets the direction of the H Bridge.
void CLI_HB_DirHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Enables/Disables the H Bridge
void CLI_HB_EnableHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Retrieve high precision timer raw tick value and formated value.
void CLI_GetHPTimeHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Spins for 100 uS and reports actual time.
void CLI_HptTestHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Display current state of Infusion Manager.
void CLI_infstateHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Display PN, version, build, and config info.
void CLI_ver_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );


#if defined(FDEBUG)
////////////////////////////////////////////////////////////////////////////////
/// \brief Print the current serial manager buffer overflow count.
void CLI_SmOverFlow_Count( SERIAL_CMD_SOURCE_T source_ );
#endif

/// \brief Commands the motor manager to run the motor at a specified rate.
void CLI_MTR_FlowHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Runs the periodic built in test for the motor manager.
void CLI_MTR_P_BIT_Handler( SERIAL_CMD_SOURCE_T source   );

////////////////////////////////////////////////////////////////////////////////
/// \brief Disables the motor
void CLI_MTR_ShutDownHandler( SERIAL_CMD_SOURCE_T source   );

////////////////////////////////////////////////////////////////////////////////
/// \brief Reports the status of the motor fault pin.
void CLI_MTR_FaultHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Reports the full arrays of debug data for motor velocity, PID error, time between iterations, and PWM commands.
#if defined( FDEBUG )
void CLI_MTR_DeltaLogHandler( SERIAL_CMD_SOURCE_T source_ );
#endif

////////////////////////////////////////////////////////////////////////////////
/// \brief Enables/Disables the LCD
void CLI_EnableScreen_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Sends a single 1 byte command to repeat across a single line on the display.
void CLI_LCD_Line_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Clears the screen of any turned on pixels.
void CLI_LCD_Clear_Cmd_Handler( SERIAL_CMD_SOURCE_T source_ );


void CLI_DAC_SetWaveHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Send message/event to infusion manager
void CLI_InfEventHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Simulate End Of Infusion using CLI command
void CLI_SimulateEndOfInfusionHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Simulate Lineset and Door Status
void CLI_SimulateHallSensorStatus( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Simulate Occlusion Detection
void CLI_SimulateOcclusionDetection( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Simulate Air In Line Detection
void CLI_SimulateAirInLineDetection( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Read Charger Pack Current.
void CLI_ReadPackCurrentCmdHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Read Cell Voltage.
void CLI_ReadCellVoltageCmdHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Read Fuel Guage Temperature in celsius.
void CLI_ReadTemperatureCmdHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Read Battery Percentage.
void CLI_ReadBatteryPercentageHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Get/Set/Save/Restore system configuration settings. ? for options
void CLI_CfgHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Sets the tone series based upon the event value entered.
void CLI_SetToneSeriesHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Function handler for alarm & alert Set/Clear/Query
void CLI_AlarmAlertHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Delete Infusion Program
void CLI_DeleteProgramHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Read Infusion Program
void CLI_ReadProgramHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Display TDC details in terms of encoder positions, hall voltage, and TDC status
void CLI_GetTDCDataHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Move the motor to the TDC position
void CLI_MoveToTDC_Handler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Retrieve the RPMs of the motor based upon the encoder counts per second
void CLI_RetrieveRPMhandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief  Retrieve the RTC information without date conversion
void CLI_RTChandler ( SERIAL_CMD_SOURCE_T source_  );

////////////////////////////////////////////////////////////////////////////////
/// \brief
void CLI_SetMinTimerHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Performs an audio demo in the specified octave. Logic exists outside of audio manager to keep program code free from CLI demo software.
void CLI_OctaveHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Calls the language manager function to create the language directory and english file
void CLI_CreateLangFile( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Enable/Disable USB interface
void CLI_ControlUSBInterface( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Write MAX1454 Internal Configuration Register
void CLI_MAX1454WriteMessageHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Write MAX1454 Internal Flash memory
void CLI_MAX1454WriteFlashPageHandler( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Send command to MAX1454 to go in fixed analog mode
void CLI_SwitchToAnalog( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Sends a command to the AIL sensor
void CLI_Ail( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Sends a command to the OCC Manager/Driver
void CLI_Occ( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Enable\disable gpio output for motor control frequency timing
void CLI_MTR_Timing ( SERIAL_CMD_SOURCE_T source_ );

////////////////////////////////////////////////////////////////////////////////
/// \brief Generates a fail safe error
void CLI_SimulateFailSafeHandler ( SERIAL_CMD_SOURCE_T source_ );

#endif //_CLI_COMMANDS_H_

